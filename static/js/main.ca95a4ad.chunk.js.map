{"version":3,"sources":["firebase/index.ts","firebase/config.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["firebaseDb","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","db","CORLORS","App","useState","items","setItems","key","x","y","dragging","setDragging","input","setInput","w","h","editMode","setEditMode","useEffect","window","location","pathname","roomName","prompt","href","ref","on","value","val","add","newPostKey","push","update","t","scrollX","Math","floor","random","scrollY","c","item","className","onDragOver","e","preventDefault","onDrop","clientX","clientY","onClick","Object","keys","map","style","left","top","background","draggable","onDragStart","child","remove","i","width","height","onChange","target","defaultValue","autoFocus","onFocus","select","onBlur","currentTarget","clientWidth","clientHeight","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ca95a4ad.chunk.js","sourcesContent":["import * as firebase from \"firebase\";\nimport { firebaseConfig } from \"./config\";\n\nexport const firebaseApp = firebase.initializeApp(firebaseConfig);\nexport const firebaseDb = firebaseApp.database();\n","export const firebaseConfig = {\n  apiKey: \"AIzaSyCsPuww81jfBe_JWhkSQk27wGUn6mIUcIo\",\n  authDomain: \"notes-147a3.firebaseapp.com\",\n  databaseURL: \"https://notes-147a3-default-rtdb.firebaseio.com\",\n  projectId: \"notes-147a3\",\n  storageBucket: \"notes-147a3.appspot.com\",\n  messagingSenderId: \"658050822110\",\n  appId: \"1:658050822110:web:7102204bdb5e3bb68db74f\"\n};","import React, { useState, useEffect } from \"react\";\nimport { firebaseDb } from \"./firebase\";\nimport \"./App.css\";\n\nlet db: firebase.database.Reference | null = null;\n\ntype Item = { t: string; x: number; y: number; c: number };\ntype Items = { [key: string]: Item };\n\nconst CORLORS = [\"#ffe1b4\", \"#FFF9D5\", \"#ECFAF5\", \"#CBF5E4\", \"#A5DEC8\", \"#FFF\"];\n\nconst App: React.FC = () => {\n  const [items, setItems] = useState<Items | null>(null);\n  const [dragging, setDragging] = useState({ key: \"\", x: 0, y: 0 });\n\n  const [input, setInput] = useState(\"\");\n  const [editMode, setEditMode] = useState({ key: \"\", w: 0, h: 0 });\n\n  useEffect(() => {\n    const path = window.location.pathname;\n    if (path === \"/\") {\n      const roomName = window.prompt(\"please input room's name\") as string;\n      window.location.href = roomName;\n    }\n    db = firebaseDb.ref(window.location.pathname);\n    db.on(\"value\", (value) => setItems(value.val()));\n  }, []);\n\n  const add = () => {\n    const newPostKey = db?.push().key as string;\n    db?.update({\n      [newPostKey]: {\n        t: \"text here\",\n        x: window.scrollX + Math.floor(Math.random() * (200 - 80) + 80),\n        y: window.scrollY + Math.floor(Math.random() * (200 - 80) + 80),\n        c: 5,\n      },\n    });\n  };\n  const update = (key: string, item: Item) => db?.update({ [key]: item });\n  const remove = (key: string) => db?.child(key).remove();\n\n  if (!items)\n    return (\n      <button className=\"AddCard\" onClick={() => add()}>\n        ＋ add card\n      </button>\n    );\n\n  return (\n    <div\n      className=\"Board\"\n      onDragOver={(e) => e.preventDefault()}\n      onDrop={(e) => {\n        if (!dragging || !items) return;\n        update(dragging.key, {\n          ...items[dragging.key],\n          x: e.clientX - dragging.x,\n          y: e.clientY - dragging.y,\n        });\n      }}\n    >\n      <button className=\"AddCard\" onClick={() => add()}>\n        ＋ add card\n      </button>\n      <div>\n        {Object.keys(items).map((key) => (\n          <div\n            key={key}\n            style={{\n              left: items[key].x + \"px\",\n              top: items[key].y + \"px\",\n              background: CORLORS[items[key].c],\n            }}\n            draggable\n            className=\"Card\"\n            onDragStart={(e) =>\n              setDragging({\n                key,\n                x: e.clientX - items[key].x,\n                y: e.clientY - items[key].y,\n              })\n            }\n          >\n            <button className=\"DeleteBtn\" onClick={() => remove(key)}>\n              ×\n            </button>\n            <div className=\"ColorSelector\">\n              {CORLORS.map((c, i) => (\n                <div\n                  key={c}\n                  className=\"ColorCircle\"\n                  onClick={() => {\n                    update(key, { ...items[key], c: i });\n                  }}\n                  style={{ background: c }}\n                />\n              ))}\n            </div>\n            {editMode.key === key ? (\n              <textarea\n                className=\"EditableText\"\n                style={{ width: editMode.w, height: editMode.h }}\n                onChange={(e) => setInput(e.target.value)}\n                defaultValue={items[key].t}\n                autoFocus\n                onFocus={(e) => e.target.select()}\n                onBlur={() => {\n                  setInput(\"\");\n                  setEditMode({ key: \"\", w: 0, h: 0 });\n                  input && update(key, { ...items[key], t: input });\n                }}\n              />\n            ) : (\n              <pre\n                className=\"Text\"\n                onClick={(e) =>\n                  setEditMode({\n                    key,\n                    w: e.currentTarget.clientWidth,\n                    h: e.currentTarget.clientHeight,\n                  })\n                }\n              >\n                {items[key].t}\n              </pre>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}